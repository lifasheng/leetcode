class Solution {
public:
/*
基本字符:    I  V  X   L   C    D    M
对应的整数:  1  5  10  50  100  500 1000
》基本规则：
1、相同的数字连写，所表示的数等于这些数字相加得到的数，如：Ⅲ = 3；
2、小的数字在大的数字的右边，所表示的数等于这些数字相加得到的数， 如：Ⅷ = 8；Ⅻ = 12；
3、小的数字，（限于Ⅰ、X 和C）在大的数字的左边，所表示的数等于大数减小数得到的数，如：Ⅳ= 4；Ⅸ= 9；
》一些限制：
1、基本数字Ⅰ、X 、C 中的任何一个，自身连用构成数目，或者放在大数的右边连用构成数目，都不能超过三个；放在大数的左边只能用一个。
2、不能把基本数字V 、L 、D 中的任何一个作为小数放在大数的左边采用相减的方法构成数目；放在大数的右边采用相加的方式构成数目，只能使用一个（MD： 1500）。
3、V 和X 左边的小数字只能用Ⅰ。
4、L 和C 左边的小数字只能用X。
5、D 和M 左边的小数字只能用C。
程序理解：
程序中为什么要加入900, 90, 9 和400, 40, 4的对应关系呢？因为，他们的罗马字符是两个基本字符相减得到的。
更重要的是5和9之间就差三个数，刚好是可以用基本字符相加得到，即6, 7, 8 对应于： VI， VII， VIII。
同理：
50和90之间的60, 70, 80则是：LX， LXX， LXXX
500和900之间的600，700, 800 则是：DC， DCC，DCCC。
1和4之间： 2, 3 对应： II， III
10和40之间： 20, 30 对应： XX， XXX
100和400之间： 200, 300 对应： CC， CCC
*/
    string intToRoman(int num) {
        const int radix[]     = {1000,  900,   500,  400,   100,  90,   50,   40,  10,   9,    5,   4,    1 };
        const string symbol[] = {"M",   "CM",  "D",  "CD",  "C",  "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        
        string roman;
        
        for(int i=0; num > 0; ++i) {
            int count = num / radix[i];
            num %= radix[i];
            
            for(; count >0; --count) {
                roman += symbol[i];
            }
        }
        
        return roman;
    }
};
